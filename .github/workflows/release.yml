name: CI

on:
  push:
    branches:
      - next
      - main

env:
  THIRD_PARTY_GIT_AUTHOR_EMAIL: opensource+bot@newrelic.com
  THIRD_PARTY_GIT_AUTHOR_NAME: nr-opensource-bot

jobs:
  log-context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  job-checkout-and-build:
    if: "!contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        env:
          cache-name: node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: |
          npm run build

  job-generate-third-party-notices:
    runs-on: ubuntu-latest
    needs: job-checkout-and-build
    steps:
      - name: Extract source variables
        run: |
          echo ::set-output name=name::${GITHUB_REF#refs/*/}
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
        id: extract_source

      # Checkout fetch-depth: 2 because there's a check to see if package.json
      # was updated, and need at least 2 commits for the check to function properly
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Download Cached Deps
        id: cache-node-modules
        uses: actions/cache@v3
        env:
          cache-name: node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install Dependencies
        run: npm ci

      - name: Install OSS CLI
        run: |
          sudo npm install -g @newrelic/newrelic-oss-cli

      - name: Generate Third Party Notices
        id: generate-notices
        run: |
          if [ ! -f "third_party_manifest.json" ]; then
            echo "::error::third_party_manifest.json is missing. Must generate using the newrelic-oss-cli."
            exit 1
          fi

          # latest commit
          LATEST_COMMIT=$(git rev-parse HEAD)

          # latest commit where package.json was changed
          LAST_CHANGED_COMMIT=$(git log -1 --format=format:%H --full-diff package.json)

          if [ $LAST_CHANGED_COMMIT = $LATEST_COMMIT ]; then
            git config user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
            git config user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"

            oss third-party manifest
            oss third-party notices

            git add third_party_manifest.json
            git add THIRD_PARTY_NOTICES.md

            git commit -m 'chore: update third-party manifest and notices [skip ci]'
            echo "::set-output name=commit::true"
          else
            echo "No change in package.json, not regenerating third-party notices"
          fi

      - name: Temporarily disable "required_pull_request_reviews" branch protection
        id: disable-branch-protection
        if: always()
        uses: actions/github-script@v1
        env:
          GITHUB_BRANCH: ${{ steps.extract_source.outputs.branch }}
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.GITHUB_BRANCH,
              required_status_checks: null,
              restrictions: null,
              enforce_admins: null,
              required_pull_request_reviews: null
            })
            console.log("Result:", result)

      - name: Push Commit
        if: steps.generate-notices.outputs.commit == 'true'
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          branch: ${{ steps.extract_source.outputs.branch }}

      - name: Re-enable "required_pull_request_reviews" branch protection
        id: enable-branch-protection
        if: always()
        uses: actions/github-script@v1
        env:
          GITHUB_BRANCH: ${{ steps.extract_source.outputs.branch }}
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.GITHUB_BRANCH,
              required_status_checks: null,
              restrictions: null,
              enforce_admins: null,
              required_pull_request_reviews: {
                required_approving_review_count: 1
              }
            })
            console.log("Result:", result)

  job-generate-release:
    runs-on: ubuntu-latest
    needs: [job-checkout-and-build, job-generate-third-party-notices]
    steps:
      - name: Extract source variables
        run: |
          echo ::set-output name=name::${GITHUB_REF#refs/*/}
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
        id: extract_source

      # Checkout specific branch we just committed third_party_notices too
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ steps.extract_source.outputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Download Cached Deps
        id: cache-node-modules
        uses: actions/cache@v3
        env:
          cache-name: node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        run: npm ci

      - name: Temporarily disable "required_pull_request_reviews" branch protection
        id: disable-branch-protection
        if: always()
        uses: actions/github-script@v1
        env:
          GITHUB_BRANCH: ${{ steps.extract_source.outputs.branch }}
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.GITHUB_BRANCH,
              required_status_checks: null,
              restrictions: null,
              enforce_admins: null,
              required_pull_request_reviews: null
            })
            console.log("Result:", result)

      - name: Update dist-tag
        if: contains(github.ref, 'next')
        run: |
          npm install -g json
          json -I -f package.json -e 'this.publishConfig.tag="next"'

      - name: Run semantic-release
        env:
          # Use nr-opensource-bot for authoring commits done by
          # semantic-release (rather than using @semantic-release-bot)
          GIT_AUTHOR_NAME: "nr-opensource-bot"
          GIT_AUTHOR_EMAIL: "opensource+bot@newrelic.com"
          GIT_COMMITTER_NAME: "nr-opensource-bot"
          GIT_COMMITTER_EMAIL: "opensource+bot@newrelic.com"
          GITHUB_TOKEN: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Re-enable "required_pull_request_reviews" branch protection
        id: enable-branch-protection
        if: always()
        uses: actions/github-script@v1
        env:
          GITHUB_BRANCH: ${{ steps.extract_source.outputs.branch }}
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.GITHUB_BRANCH,
              required_status_checks: null,
              restrictions: null,
              enforce_admins: null,
              required_pull_request_reviews: {
                required_approving_review_count: 1
              }
            })
            console.log("Result:", result)